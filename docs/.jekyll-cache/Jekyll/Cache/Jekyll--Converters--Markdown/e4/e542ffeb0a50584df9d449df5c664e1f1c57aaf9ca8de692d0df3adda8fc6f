I"O+<style>
h2 {
    margin-top: 30px;
}
h3 {
    margin-top: 30px;
}
pre {
    line-height: 1.25em;
}
pre code {
    font-size: 0.9em;
}
</style>

<h3 id="scientific-visualizations">Scientific visualizations</h3>
<p>Data visualization is a hot topic both in science as well as in the popular
media. There are entire teams hired by companies like the New York Times 
with the sole focus of developing data visualization content. These are 
composed of graphic designers, as well as of coders and data scientists; 
these skills are intertwined, and becoming proficient in data visualization
techniques is an incredibly valuable skill.</p>

<h3 id="visualization-libraries">Visualization libraries</h3>
<p>Up to this point you have been introduced to several scientific 
visualization tools in Python, and you have likely explored several more
while working on your project. You’ve seen <code class="language-plaintext highlighter-rouge">matplotlib</code> and <code class="language-plaintext highlighter-rouge">toyplot</code>, 
and you may have also seen <code class="language-plaintext highlighter-rouge">altair</code>, <code class="language-plaintext highlighter-rouge">bokeh</code>, or one of several tools that
act as wrappers around JavaScript based plotting tools, such as <code class="language-plaintext highlighter-rouge">folium</code> or
<code class="language-plaintext highlighter-rouge">pydeck</code>. Here we will dive deeper into visualization methods, to understand
how they work, and when to choose one method over another. By demystifying
the inner-workings of data visualization you will likely have an easier time
learning and troubleshooting new libraries.</p>

<h3 id="rasters-vs-vectors">Rasters vs Vectors</h3>
<p>At the core of data visualization is the concept of <em>rendering</em>: how the
data is encoded into visual objects. Here there are two fundamental 
types, rasters and vectors. Raster graphics are the typical type you are 
likely to be most familiar with. This includes PNG and JPG – the type of 
files you create whenever you take a photo. They are composed of a set 
dimension of pixels, and each pixel can be assigned values corresponding 
to colors, brightness, or other layered effects to produce an image.
Vectors on the other hand are used more widely in graphic design, and often
in data visualization. These represent shapes that are described by a set of
rules (e.g., draw a line from this point to that point on a coordinate grid).
The advantage of vectors is that they are pixel-less, meaning you can zoom
infinitely into the image without losing resolution.</p>

<p>Here are more refined definitions from the matplotlib docs:</p>

<ul>
  <li>
    <p>Raster graphics: 
  Rasters, or bitmaps, represent an image as an array of pixels which 
  is resolution dependent. Raster graphics are generally most practical for
  photo-realistic images, but do not scale easily without loss of quality.
  The density of pixels can usually be set with a DPI setting.</p>
  </li>
  <li>
    <p>Vector graphics: 
  Vector graphics use geometrical primitives (rules) based upon 
  mathematical equations to represent images in computer graphics. 
  Primitives can include points, lines, curves, and shapes or polygons. 
  Vector graphics are scalable, which means that they can be resized 
  without suffering from issues related to inherent resolution like are 
  seen in raster graphics. Vector graphics are generally most practical 
  for typesetting and graphic design applications.</p>
  </li>
</ul>

<h3 id="why-use-rasters-eg-png">Why use rasters (e.g., PNG)?</h3>
<p>The size of a PNG figure will only ever be as large as the number of 
pixels in the drawing. This is especially important when a plot includes
<strong>a lot</strong> of data. Many of you have probably experienced the case before of
reading a PDF or Word doc and arriving at an embedded figure that slooows the
loading and scrolling of the page to a crawl, because it is working so hard to
load the image. This was bad design on the part of the document creator. 
Given the large size of the figure they should have selected a raster 
instead of vector type for the embedded image. For example, a PNG can 
represent millions of overlapping points on a plot by simply assigning values
to every pixel, whereas a vector graphic (SVG) would instead include millions
of descriptions of the underlying data inside its content.</p>

<h3 id="why-use-vectors-eg-svg">Why use vectors (e.g., SVG)?</h3>
<p>Vector graphics look sharper, and retain the distinct identify of each element
in the drawing which allows for easier editing of the content after it is 
created, for example by using vector graphic editing software like InkScape or
Illustrator. In addition, you can apply styles to vector graphic using 
web-based languages like CSS to dynamically change the style of vector 
drawings, and even to add animations. These advantages of vector drawings 
make them widely used on the web, and in web-based plotting libraries, where
shapes can be created, edited, and interacted with using HTML, CSS, and 
JavaScript.</p>

<h3 id="what-is-a-plotting-library">What is a plotting library?</h3>
<p>As described above, an image or drawing is typically described either as 
bitmap (2 or 3-dimensional array of pixels) or as an SVG (markup language
– more on this later), neither of which are composed of Python code.
Similarly, they are not composed of R code, or JavaScript code, or C++ code,
yet each of these languages is capable of creating plots by generating 
content in either raster or SVG format. <strong>That is all that a plotting library
is</strong>: a syntax in a specific computer language for generating valid raster
and/or vector drawings. Given how general that description is, you can imagine
why so many different types of plotting libraries have been developed across
so many different languages.</p>

<h2 id="matplotlib-example">Matplotlib example</h2>
<p>Matplotlib is a wonky example, as I’ve described previously. Its a behemoth
Python library that has been around for decades. It was originally developed
as a port of the plotting library from a different computer language called
<code class="language-plaintext highlighter-rouge">matlab</code>, meaning that its design (syntax) was created to mimic that of the
one in matlab. Because it has been around so long it has become widely used
in Python. But because of its origin it also has a weird non-Pythonic syntax
that takes a long time to learn. (end rant).</p>

<h3 id="plotting-backend">Plotting backend</h3>
<p>If you have used matplotlib in a Jupyter notebook you may have noticed
that is sometimes seems like the images are a little <em>grainy</em>. What’s the 
deal, can’t this library produce better looking figures? The answer is yes,
but you need to change some settings. This default style was selected to 
make plotting very fast and responsive, with the expectation that the user
will change settings when they are ready to produce the final publication-quality
figure. What are these settings? The first important one to consider is the 
“backend”, meaning the actual engine/method by which the Python instructions
are turned into an image or drawing.</p>

<p>There are user-interface backends (which use SVG often wrapped in HTML
or other types of canvases), which respond to your actions, 
or static (hardcopy) backends, which once put to print are 
unchangeable (e.g., your typical PNG or PDF).
<a href="https://matplotlib.org/2.0.2/faq/usage_faq.html#what-is-a-backend">Read more about it here</a>. The backend is one layer above the 
raster/svg dichotomy, and represents the method for creating and embedding
the raster or svg into a document.</p>

<p>By default matplotlib uses a backend called “Agg”, for anti-grain geometry,
which generates PNG (static-type) drawings. If you are writing a normal 
Python script and call <code class="language-plaintext highlighter-rouge">.show()</code> on your matplotlib figure it will open the
PNG in a window using your default system image viewer. If you are working in
a jupyter notebook it will use the “inline” instruction set to embed the 
PNG image into the HTML area below a code cell.</p>

<p>If you are an R user you might be familiar with the Cairo backend, 
which is also optionallly available as a backend for matplotlib. 
This backend can produce either static or interactive types, depending on 
its specific settings.</p>

<p>You can change the backend in matplotlib from using the default ‘agg’ (raster)
method to used the SVG backend by adding a few lines of code to the top of 
your script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># set matplotlib backend to SVG
</span><span class="n">matplotlib</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'svg'</span><span class="p">)</span>

<span class="c1"># now the drawing will be vector graphic instead of raster
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>Or, if you are using a jupyter notebook then the syntax is a bit different:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="o">%</span><span class="n">config</span> <span class="n">InlineBackend</span><span class="p">.</span><span class="n">figure_format</span> <span class="o">=</span> <span class="s">'svg'</span>

<span class="c1"># now the drawing will be vector graphic instead of raster
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
:ET