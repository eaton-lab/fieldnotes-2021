I"n#<style>
h3 {
    margin-top: 30px
}
pre {
    line-height: 1.5em;
}
pre code {
    font-size: 0.9em;
}
</style>

<h2 id="from-scripting-to-programming">From scripting to programming</h2>
<p>This is meant as a challenging exercise. You will try to write and implement
a program by following only a simple set of instructions, and looking at an 
existing framework. From these, and anything else you can search online, 
you will try to accomplish the designated tasks.</p>

<h3 id="learning-objectives">Learning objectives:</h3>
<p>By the end of this tutorial you will:</p>
<ul>
  <li>Have created a working Python program.</li>
  <li>Be introduced to Python development setup.</li>
  <li>Be familiar with the structure of a functioning Python program.</li>
</ul>

<h3 id="challenge">Challenge:</h3>
<p>Your challenge is to create a command line program like the 
<a href="https://github.com/hackers-test/hack-9-python">darwinday</a> example from class.
It must meet the following requirements:</p>
<ol>
  <li>Contains a package folder</li>
  <li>Contains a Python module in the folder</li>
  <li>Contains a <code class="language-plaintext highlighter-rouge">__init__.py</code> file.</li>
  <li>Contains a <code class="language-plaintext highlighter-rouge">__main__.py</code> file.</li>
  <li>Contains a <code class="language-plaintext highlighter-rouge">setup.py</code> file.</li>
  <li>The program can be executed from the command line with arguments.</li>
  <li>The program is demonstrated in the README file.</li>
</ol>

<p>The vague instructions below will help to guide you on your way:</p>

<h3 id="1-setup-a-new-repo">1. Setup a new repo</h3>
<ol>
  <li>Create a new repo with a README on GitHub named “hack-program”</li>
  <li>Clone the repo to your <code class="language-plaintext highlighter-rouge">~/hacks</code> directory and <code class="language-plaintext highlighter-rouge">cd</code> into it.</li>
  <li>Create a new folder inside <code class="language-plaintext highlighter-rouge">hack-program</code> to hold your Python package and give it any name you want.</li>
  <li>Create a new module (.py file) inside of that folder and give it any name you want.</li>
</ol>

<h3 id="2-write-python-code">2. Write Python code</h3>
<ol>
  <li>
    <p>In your module write one or more Python functions (or classes) 
that takes one or more arguments and uses the <code class="language-plaintext highlighter-rouge">print()</code> function to 
write some output to stdout. Your code should be different from the darwinday
example. Try to get creative, but do not spend a ton of time on this, since
we are more focused on packaging than function-writing in this exercise.</p>
  </li>
  <li>
    <p>Create a <code class="language-plaintext highlighter-rouge">__main__</code> dunder at the bottom of the file and write a 
test of your function there. Test it using ‘build’ methods in your editor
while you are writing to ensure that your code works.</p>
  </li>
</ol>

<h3 id="3-make-your-functions-accessible-from-the-package">3. Make your functions accessible from the package</h3>
<ol>
  <li>Create an <code class="language-plaintext highlighter-rouge">__init__.py</code> file in the package folder. In here 
add an import statement to import the functions in the module into
the package-level namespace. (See the darwinday example).</li>
</ol>

<h3 id="4-make-your-program-able-to-take-command-line-arguments">4. Make your program able to take command line arguments</h3>
<ol>
  <li>
    <p>Create a <code class="language-plaintext highlighter-rouge">__main__.py</code> file in the package folder. In here
create a function that can parse command line arguments using 
the ArgParse package from the standard library (see darwinday
for an example). See also the <a href="https://docs.python.org/3/howto/argparse.html">official docs</a>
for further usage examples.</p>
  </li>
  <li>
    <p>Create a function called main in <code class="language-plaintext highlighter-rouge">__main__.py</code> that takes the 
parsed command line arguments and passes them to one or more of your 
functions from your module. (See the example in darwinday.) In this 
way your functions can be called in different ways depending on the 
command line arguments.</p>
  </li>
</ol>

<h3 id="5-make-your-program-installable-and-executable">5. Make your program installable and executable</h3>
<ol>
  <li>Make a file called <code class="language-plaintext highlighter-rouge">setup.py</code> in your repo folder (<code class="language-plaintext highlighter-rouge">hack-program</code>)
(not inside the package folder). This is a special kind of file used to 
make a Python into a real “package”. Read more details from the <a href="https://docs.python.org/3/distutils/setupscript.html">official
docs</a>. 
Here we will create the simplest example. In this file write the following 
instructions, but replace the package, module, and function names in the
<code class="language-plaintext highlighter-rouge">entry_points</code> section with those from your code:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s">"darwinday"</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="s">"0.0.1"</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="p">[],</span>
    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
        <span class="s">'console_scripts'</span><span class="p">:</span> <span class="p">[</span><span class="s">'darwinday = darwinday.__main__:main'</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>Call the <code class="language-plaintext highlighter-rouge">setup.py</code> script from your terminal using the <code class="language-plaintext highlighter-rouge">pip</code> command line 
tool. This tool is available by default in your conda installation. It 
can be used to install our new package into the location where conda 
installs other packages. Here we will install it in “development-mode” (<code class="language-plaintext highlighter-rouge">-e</code>),
meaning that it will continue to look at this repo folder for changes and 
update automatically without you needing to call <code class="language-plaintext highlighter-rouge">pip</code> again to load these
updates.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># note the . at the end; you must be in the location of the setup.py file.</span>
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>
</code></pre></div></div>
<pre style="background-color: lightgrey; padding:10px">
Obtaining file:///home/deren/hacks/hack-9-python
Installing collected packages: darwinday
  Attempting uninstall: darwinday
    Found existing installation: darwinday 0.0.1
    Uninstalling darwinday-0.0.1:
      Successfully uninstalled darwinday-0.0.1
  Running setup.py develop for darwinday
Successfully installed darwinday
</pre>

<p>Congrats, your package is now installed!</p>

<h3 id="6-test-your-command-line-interface-cli-program">6. Test your command-line interface (CLI) program</h3>
<ol>
  <li>Call your program from your terminal. The name entered to the 
<code class="language-plaintext highlighter-rouge">entry_points</code> section of the <code class="language-plaintext highlighter-rouge">setup.py</code> script before the <code class="language-plaintext highlighter-rouge">=</code> will become
a named executable. The arguments writtin the <code class="language-plaintext highlighter-rouge">__main__.py</code> argparse section
will be available as options. By default, argparse will make the <code class="language-plaintext highlighter-rouge">--help</code> 
option available. Try this out, substituting your program name:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_program_name <span class="nt">--help</span>
</code></pre></div></div>

<p>If you get an error, try to debug it. Revisit the darwinday example and try
to use it as a framework for developing your package. 
After trying for a while if you are still stuck then push your code to 
GitHub and seek help on the chatroom by sharing the link to your repo.</p>

<h3 id="7-write-instructions-in-your-readme-and-push-to-github">7. Write instructions in your README and push to GitHub</h3>
<ol>
  <li>
    <p>Edit your README.md file to provide instructions on how to use your 
new command line program.</p>
  </li>
  <li>
    <p>Commit and push your final completed package to your GitHub.</p>
  </li>
</ol>
:ET